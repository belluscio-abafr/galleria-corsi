console.log('This site was generated by Hugo.');

// Lightbox functionality
// ======================

class ProjectLightbox {
  constructor() {
    this.lightbox = null;
    this.images = [];
    this.currentIndex = 0;
    this.hideTimeout = null;
    this.hideDelay = 1000; // 1 second
    this.init();
  }

  init() {
    this.createLightboxHTML();
    this.bindEvents();
    this.findImages();
  }

  createLightboxHTML() {
    const lightboxHTML = `
      <div class="lightbox" id="project-lightbox">
        <div class="lightbox-content">
          <img src="" alt="" id="lightbox-image">
          <button class="lightbox-controls prev" id="lightbox-prev">‹</button>
          <button class="lightbox-controls next" id="lightbox-next">›</button>
          <button class="lightbox-close" id="lightbox-close">×</button>
        </div>
      </div>
    `;
    
    document.body.insertAdjacentHTML('beforeend', lightboxHTML);
    this.lightbox = document.getElementById('project-lightbox');
  }

  findImages() {
    // Find all images in project content
    const projectContent = document.querySelector('.project-content');
    if (!projectContent) return;
    
    this.images = Array.from(projectContent.querySelectorAll('img'))
      .map((img, index) => ({
        src: img.src,
        alt: img.alt,
        element: img,
        index: index
      }));
    
    // Make images clickable
    this.images.forEach((imageData) => {
      imageData.element.addEventListener('click', () => {
        this.open(imageData.index);
      });
    });
  }

  bindEvents() {
    // Close lightbox events
    document.addEventListener('click', (e) => {
      if (e.target.id === 'project-lightbox' || e.target.id === 'lightbox-close') {
        this.close();
      }
    });

    // Navigation events
    document.addEventListener('click', (e) => {
      if (e.target.id === 'lightbox-prev') {
        this.prev();
        this.resetHideTimer();
      } else if (e.target.id === 'lightbox-next') {
        this.next();
        this.resetHideTimer();
      }
    });

    // Keyboard events
    document.addEventListener('keydown', (e) => {
      if (!this.lightbox.classList.contains('show')) return;
      
      this.resetHideTimer();
      
      switch(e.key) {
        case 'Escape':
          this.close();
          break;
        case 'ArrowLeft':
          this.prev();
          break;
        case 'ArrowRight':
          this.next();
          break;
      }
    });

    // Mouse move events for auto-hide
    document.addEventListener('mousemove', (e) => {
      if (this.lightbox && this.lightbox.classList.contains('show')) {
        this.resetHideTimer();
      }
    });
  }

  open(index) {
    this.currentIndex = index;
    this.updateImage();
    this.lightbox.classList.add('show');
    document.body.classList.add('lightbox-open');
    this.resetHideTimer();
  }

  close() {
    this.lightbox.classList.remove('show');
    this.lightbox.classList.remove('hide-controls');
    document.body.classList.remove('lightbox-open');
    this.clearHideTimer();
  }

  prev() {
    if (this.currentIndex > 0) {
      this.currentIndex--;
      this.updateImage();
    }
  }

  next() {
    if (this.currentIndex < this.images.length - 1) {
      this.currentIndex++;
      this.updateImage();
    }
  }

  updateImage() {
    const currentImage = this.images[this.currentIndex];
    const lightboxImage = document.getElementById('lightbox-image');
    const prevBtn = document.getElementById('lightbox-prev');
    const nextBtn = document.getElementById('lightbox-next');
    
    // Update image
    lightboxImage.src = currentImage.src;
    lightboxImage.alt = currentImage.alt;
    
    // Update navigation state
    prevBtn.classList.toggle('disabled', this.currentIndex === 0);
    nextBtn.classList.toggle('disabled', this.currentIndex === this.images.length - 1);
  }

  resetHideTimer() {
    this.clearHideTimer();
    this.lightbox.classList.remove('hide-controls');
    
    this.hideTimeout = setTimeout(() => {
      if (this.lightbox && this.lightbox.classList.contains('show')) {
        this.lightbox.classList.add('hide-controls');
      }
    }, this.hideDelay);
  }

  clearHideTimer() {
    if (this.hideTimeout) {
      clearTimeout(this.hideTimeout);
      this.hideTimeout = null;
    }
  }
}

// Initialize lightbox when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
  // Only initialize on project pages
  if (document.querySelector('.project-content')) {
    new ProjectLightbox();
  }
});
